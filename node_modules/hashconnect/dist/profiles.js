var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
export var UserProfileHelper = /** @class */ (function () {
    function UserProfileHelper() {
    }
    /**
     * Get a user profile from the HashConnect API
     * @param accountId
     * @param network (optional)
     * @returns
     * @example
     * ```ts
     * const userProfile = await hashconnect.getUserProfile("0.0.12345");
     * ```
     * @category User Profiles
     */
    UserProfileHelper.getUserProfile = function (accountId, network) {
        if (network === void 0) { network = "mainnet"; }
        return __awaiter(this, void 0, void 0, function () {
            var cachedProfile, response, userProfile, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedProfile = this.cache.find(function (profile) { return profile.accountId === accountId && profile.network === network; });
                        if (cachedProfile) {
                            return [2 /*return*/, cachedProfile];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, fetch("https://api.hashpack.app/user-profile/get", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                },
                                body: JSON.stringify({ accountId: accountId.toString(), network: network }),
                            })];
                    case 2:
                        response = _a.sent();
                        if (!response.ok) {
                            throw new Error("Failed to get user profile");
                        }
                        return [4 /*yield*/, response.json()];
                    case 3:
                        userProfile = _a.sent();
                        if (userProfile)
                            this.cache.push(userProfile);
                        return [2 /*return*/, userProfile];
                    case 4:
                        error_1 = _a.sent();
                        console.error(error_1);
                        throw error_1;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get multiple user profiles from the HashConnect API
     * @param accountIds []
     * @param network (optional)
     * @returns
     * @example
     * ```ts
     * const userProfiles = await hashconnect.getMultipleUserProfiles(["0.0.12345", "0.0.12346"]);
     * ```
     * @category User Profiles
     */
    UserProfileHelper.getMultipleUserProfiles = function (accountIds, network) {
        if (network === void 0) { network = "mainnet"; }
        return __awaiter(this, void 0, void 0, function () {
            var cachedProfiles, idsToFetch, _loop_1, this_1, _i, accountIds_1, id, response, fetchedProfiles, error_2;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        cachedProfiles = [];
                        idsToFetch = [];
                        _loop_1 = function (id) {
                            var cachedProfile = this_1.cache.find(function (profile) { return profile.accountId === id && profile.network === network; });
                            if (cachedProfile) {
                                cachedProfiles.push(cachedProfile);
                            }
                            else {
                                idsToFetch.push(id);
                            }
                        };
                        this_1 = this;
                        for (_i = 0, accountIds_1 = accountIds; _i < accountIds_1.length; _i++) {
                            id = accountIds_1[_i];
                            _loop_1(id);
                        }
                        if (idsToFetch.length === 0) {
                            return [2 /*return*/, cachedProfiles];
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, fetch("https://api.hashpack.app/user-profile/get-multiple", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                },
                                body: JSON.stringify({ accountIds: idsToFetch, network: network }),
                            })];
                    case 2:
                        response = _b.sent();
                        if (!response.ok) {
                            throw new Error("Failed to get user profiles");
                        }
                        return [4 /*yield*/, response.json()];
                    case 3:
                        fetchedProfiles = _b.sent();
                        //remove nulls
                        fetchedProfiles.filter(function (profile) { return profile !== null; });
                        (_a = this.cache).push.apply(_a, fetchedProfiles);
                        return [2 /*return*/, __spreadArray(__spreadArray([], cachedProfiles, true), fetchedProfiles, true)];
                    case 4:
                        error_2 = _b.sent();
                        console.error(error_2);
                        throw error_2;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    UserProfileHelper.cache = [];
    return UserProfileHelper;
}());
